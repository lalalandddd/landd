package homework;

public class java0718_Pattern {
}
/*
2~3인 1조로 과제 수행         (((다음주 수요일 7/24 발표 )))
자바 디자인 패턴 중 하나를 선택하여 예시 코드를 만들고 발표ppt 만들기
다른 사람들에게 선택한 디자인 패턴을 설명해야 한다.
1조-전형준,서석완 2조-황정아,이미진,박찬미 3조-김건우,정한종 4조-박재범,송미연
5조-이재호,유재학 6조-서형준,이유찬 8조-이상민,송영진
7조-이연상,김경제 (10. Facade(퍼사드))

디자인패턴
1. Abstract Factory(추상팩토리)
 - 관련된 객체들의 집합을 생성할 수 있는 인터페이스를 제공
 - 구체적인 클래스는 지정하지 않습니다
2. Builder (빌더)    ((8조))
 - 객체를 단계별로 생성할 수 있게 도와주는 패턴
 - 복잡한 객체 생성 과정을 숨기고 동일 생성 절차에서 서로 다른 표현 생성
3. Factory Method(팩토리메서드)    ((6조))
 - 객체 생성 코드를 별도의 메서드로 캡슐화
 - 서브클래스에서 이를 오버라이드하여 원하는 객체를 생성합니다.
4. Prototype ( 프로토타입)    ((1조))
 - 기존 객체를 복제하여 새로운 객체를 생성
 - 새 객체를 만들기 위한 비용 감소
5. Singleton (싱글톤)    ((2조))
 - 클래스의 인스턴스가 오직 하나만 생성되도록 보장
 - 전역 접근점을 제공
6. Adapter (어댑터)    ((3조))
 - 호환되지 않는 인터페이스를 가진 두 클래스가 함께 동작할 수 있도록 중재자 역할
7. Bridge (브릿지)    ((선생님이 선택을 원했던 것 중 하나))
 - 구현부에서 추상층을 분리하여 각각 독립적으로 변형할 수 있도록 한다
8. Composite ( 컴포지트 )
 - 객체를 트리 구조로 구성하여 부분-전체 계층을 표현
 - 단일 객체와 복합 객체를 동일하게 취급
9. Decorator (데코레이터)
 - 객체에 기능을 동적으로 추가할 수 있다
 - 상속 대신 유연하게 기능을 확장
10. Facade ( 퍼사드)    ((7조))
 - 복잡한 시스템에 단순한 인터페이스를 제공
 - 서브시스템에 대한 접근을 단순화
11. Flyweight (플라이웨이트)
 - 다수의 작은 객체를 공유하여 메모리 사용을 줄인다
12. Proxy (프록시)
 - 다른 객체에 대한 접근을 제어하는 대리자 역할
13. Chain of Responsibility(책임연쇄)
 - 요청을 처리할 수 있는 기회를 하나 이상의 객체에게 부여
 - 각 객체는 체인 내의 다음 객체로 요청을 전달
14. Command (커맨드)
 - 요청을 객체로 캡슐화하여 다양한 요청, 큐잉, 로그 기능을 수행
15. Interpreter(인터프리터)
 - 언어의 문법을 캡슐화하여 해석할 수 있도록 하는 패턴
16. Iterator (이터레이터)
 - 컬렉션의 요소들을 순차적으로 접근할 수 있게 해준다
17. Mediator(미디에이터)
 - 객체 간의 복잡한 통신을 중재자 객체를 통해 처리
18. Memento (메멘토)
 - 객체의 상태를 저장하고 복원할 수 있도록 한다
19. Observer (옵저버)    ((4조))
 - 객체의 상태 변화에 따라 다른 객체들이 통지받고 갱신될 수 있도록 한다
20. State (스테이트)
 - 객체의 내부 상태에 따라 행동을 변경
21. Strategy ( 스트래티지)    ((내가생각했던거))
 - 알고리즘을 캡슐화하여 교체 가능하게 만든다
22. Template Method(템플릿메서드)    ((5조))
 - 알고리즘의 구조를 정의, 하위 클래스에서 알고리즘의 단계를 구현
23. Vistor (비지터)
 - 객체 구조를 변경하지 않고 새로운 연산을 추가
*/